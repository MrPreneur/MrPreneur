var CompanyHelper = Class.create({	initialize:function()	{		this.DALHelper=new DAL("MrPreneur","1.0",100000);	},	DALHelper:null,			testMethod:function()	{		var self=this;		new DAL().executeQuery("write query here",function(result){self.successCreate(result);});	},	testSuccess:function(result)	{		//result.rows.item(i).columnname --> where i is row number	},		//Mona's Methods		// Insert - Update - Remove 	insert:function(comp,callback)	{	    Name=comp.name;		StockPrice=comp.stockPrice;		Rating=comp.rating;		Cash=comp.cash;		PlayerId=comp.ownerID;		CityId=comp.mainCityID;		LogoID=comp.logoId;	    new DAL().executeQuery("Insert into Company (Name, StockPrice, Rating, Cash,PlayerId, MainCityId, LogoId) values ('"+Name+"',"+StockPrice+","+Rating+","+Cash+","+PlayerId+","+CityId+","+LogoId+")",function(result)		{		comp.id=result.insertId;		new DAL().executeQuery("Insert into CitiesCompanies (CityId,CompanyId) values ("+comp.mainCityID+","+comp.id+")",function(result){});			if(typeof(callback)!='undefined')			{				callback(comp);			}		});	},		update:function(Id,name,stockPrice,rating,cash,PlayerId,CityId,LogoID)	{	    new DAL().executeQuery("Update Company Set Name='"+name+"', StockPrice="+stockPrice+", Rating="+rating+", Cash="+cash+",PlayerId="+PlayerId+",MainCityId="+CityId+",logoId="+LogoID+" Where Id = "+Id,function(result){});		},			remove:function(ID)	{	   new DAL().executeQuery("Delete from Company where Id="+ID,function(result){});	   new DAL().executeQuery("Delete from CitiesCompanies where CompanyId="+ID,function(result){});	},				//Omnia's Methods			getCompanyCitiesById:function(CompanyId,callback)	{		new DAL().executeQuery("select CityId from CitiesCompanies where  CitiesCompanies.CompanyId="+CompanyId,function(result){callback(result);});	},		getAllWorkingBM:function(CompanyID,callback)	{		var self=this;		new DAL().executeQuery("select * from WorkingBoardMember where CompanyId="+CompanyID,function(result){new WorkingBoardMember().map(result,callback);},function(err){console.log(err);});	},		getCompletedProjects:function(CompanyID,callback)	{		var self=this;		new DAL().executeQuery("select * from CompletedProject where CompanyId="+CompanyID,function(result){new CompletedProject().map(result,callback);},function(err){console.log(err);});	},	getUCProjects:function(CompanyID,callback)	{		var self=this;		new DAL().executeQuery("select * from UnderConstructionProject where CompanyId ="+CompanyID,function(result){new UnderConstructionProject().map(result,callback);},function(err){console.log(err);});	},		getTiles:function(CompanyID,callback)	{		var self=this;		new DAL().executeQuery("select * from Tile where CompanyId ="+CompanyID,function(result){new Tile().map(result,callback);},function(err){console.log(err);});	},		getCompanyActivities:function(CompanyID,callback)	{		var self = this;		new DAL().executeQuery("select * from Activity where CompanyId="+CompanyID,function(result){new Activity().map(result,callback);},function(err){console.log(err);});	},	//Moamen's methods					//Adel's Methods		getAllCompanies:function(gameID,callback)	{		var self=this;		new DAL().executeQuery("select * from Company where GameId="+gameID,function (results){callback(results.rows);});		console.log(gameID);	},		//Joe's Methods					//Oss's Methods			//buy Tile (layer) company class	//retrieve all working BM  (company helper)	//retrieve all available BM  (company helper)	//update Company Data  (company helper)		/*getAllWorkingBM:function(CompanyID)	{		var self=this;		this.DALHelper.executeQuery("select * from WorkingBoardMember where companyId="+CompanyID+"",function(result){self.getall_Success(result);},function(err){console.log(err);});	},		getall_Success:function(result)	{		console.log(result.rows.length);	},*///////////////////////////////////	getAvailableBM:function(CompanyID)	{		var self=this;		this.DALHelper.executeQuery("select * from WorkingBoardMember where CompanyId="+CompanyID+" and Id not in (select WorkingBoardMemberId from Activity where CompanyId="+CompanyID+")",function(result){self.getavailable_Success(result);},function(err){console.log(err);});	},		getavailable_Success:function(result)	{		console.log(result.rows.length);	},	//////////////////////////////		buyTile:function(TileID,CompanyID,WorkingBoardMemberID)	{	}	/////////////////////////////	//calculate time from neg. skills of board member		not finished	/*	claculatetime:function(WorkingBM,comp_obj,tile_obj)	{		var self=this;		this.DALHelper.executeQuery("select * from Skills where Id="+workingBM.SkillsId+"",functio(result){self.calc_success(result);},fuunction(err){console.log(err);});			},		calc_success:function(result)	{		console.log(result.Negotiation)	},		//return 7aga:this company is buying this tile by this BM	//var Neg_Id=executeQuery("select Id from ActivityType where Operation="Negotiation"")	//method to assign BM takes parameters(comp_obj.Id,WorkingBM.Id,tile_obj,Neg_Id)		/////////////////////////////		var self=this;		this.DALHelper.executeQuery("SELECT * FROM Tile where CompanyId is null",function(result){self.buyTile_Success(result);},function(err){console.log(err);});	},		buyTile_Success:function(result)	{		console.log(result.rows.length);	}*/	});
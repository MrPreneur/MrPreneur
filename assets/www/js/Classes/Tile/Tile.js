var Tile = Class.create({		//Constructor Method	initialize: function(){		this.helper=new TileHelper();		this.CompletedProjectId= 0;        this.UnderConstructionProjectId = 0;	},		//Properties:	id:0,	image:null,//object from image	cityId:0,	position:{x:-1,y:-1} ,	companyId:0,	runningProject:null, //object	underconstructionProject:null, //object	isDrawable:true,	isBuildable:true,	priceLevel:0, //percentage	runningProjectImage:null,	underconstructionProjectImage:null,	imageId:0,	UnderConstructionProjectId:0,	CompletedProjectId:0,	//Methods:			//Omnia's Methods 	insert:function(callback)	{	    new TileHelper().insert(this,callback);	},		remove:function()	{	   new TileHelper().remove(this.id);	},		upDate:function()   {   		var self = this;   		new TileHelper().upDate(self);   },		map: function (results, callback) {        var arr = new Array();        var count = 0;				if(results.rows.length==0)		{			callback(new Array());		}		else		{			for (var i = 0; i < results.rows.length; i++) {				var row = results.rows.item(i);				var t = new Tile();				t.id = row.Id;				t.cityId = row.CityId;				t.position = { x: row.PositionX, y: row.PositionY };				t.companyId = row.CompanyId;				t.isDrawable = row.IsDrawable;				t.isBuildable = row.IsBuildable;				t.priceLevel = row.PriceLevel;				t.CompletedProjectId  =row.CompletedProjectId;				t.UnderConstructionProjectId =row.UnderConstructionProjectId;				t.imageId=row.ImageId				arr.push(t);												this.helper.getTileImage(row.ImageId, function (img) {											if(img.length>0)					{						for (var j = 0; j < arr.length; j++) {							if (arr[j].imageId == img[0].Id)							{								arr[j].image = img[0];															}						}					}											if (arr[count].UnderConstructionProjectId!= null)						{						 							new ProjectHelper().getUnerConstructionProjectById(arr[count].UnderConstructionProjectId, function (UCAry) {																if(UCAry.length>0)								{									for (var k = 0; k <arr.length; k++) {										if (arr[k].UnderConstructionProjectId == UCAry[0].id)										{											arr[k].underconstructionProject = UCAry[0];																						break;										}									}								}								count++;								if (count == results.rows.length)								{																		callback(arr);								}							});						}						else if (arr[count].CompletedProjectId != null) {						 												 new ProjectHelper().getCompletedProjectByID(arr[count].CompletedProjectId, function (CAry) {																if(CAry.length>0)								{									for (var k = 0; k < arr.length; k++) {										if (arr[k].CompletedProjectId == CAry[0].id) {											arr[k].CompletedProject = CAry[0];																																	break;										}									}								}								count++																if (count == results.rows.length) {																	callback(arr);								}							});						}						else						{														count++;							if (count == results.rows.length) {															callback(arr);							}													}																				});			}		}    }	});
var testDAL = Class.create({	initialize:function()	{		this.DALHelper=new DAL("MrPreneur","1.0",10000);	},	DALHelper:null,			createDataBase:function(callback)	{		var self=this;		new DAL().executeQuery("select * from Game",function(){callback();},function(){console.log("creating db");self.CreateTables(callback);});	},		CreateTables:function(callback)	{		var qs=new Array();		qs.push("CREATE TABLE IF NOT EXISTS LargeImages (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,ImagePath VARCHAR NOT NULL )"); 		qs.push("CREATE TABLE IF NOT EXISTS LogoImage (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,LargeImageID INTEGER ,ImageName VARCHAR NOT NULL ,FOREIGN KEY(LargeImageID ) REFERENCES LargeImages(Id) )"); 		qs.push("CREATE TABLE IF NOT EXISTS PlayerImage (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,LargeImageID INTEGER REFERENCES LargeImages(Id) ,ImageName VARCHAR NOT NULL)"); 		qs.push("CREATE TABLE IF NOT EXISTS ProjectImage (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,LargeImageID INTEGER ,ImageName VARCHAR NOT NULL ,FOREIGN KEY(LargeImageID ) REFERENCES LargeImages(Id) )"); 		qs.push("CREATE TABLE IF NOT EXISTS TileImage (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,LargeImageID INTEGER ,ImageName VARCHAR NOT NULL ,FOREIGN KEY(LargeImageID ) REFERENCES LargeImages(Id) )"); 		qs.push("CREATE TABLE IF NOT EXISTS UnderConstructionProjectImage (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,ImageName VARCHAR ,LargeImageID INTEGER NOT NULL  REFERENCES LargeImages(Id) on update cascade on delete cascade)"); 		qs.push("CREATE TABLE IF NOT EXISTS BoardMemberImage (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,LargeImageID INTEGER ,ImageName VARCHAR NOT NULL ,FOREIGN KEY(LargeImageID ) REFERENCES LargeImages(Id) )"); 		qs.push("CREATE TABLE IF NOT EXISTS Game (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,CurrentMonth INTEGER NOT NULL )"); 		qs.push("CREATE TABLE IF NOT EXISTS Player (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name Varchar not null  ,Age integer not null,ImageId integer not null  REFERENCES PlayerImage(Id) ON UPDATE CASCADE,IsComputer Boolean not null)"); 		qs.push("CREATE TABLE IF NOT EXISTS GamePlayers (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,GameId integer not null REFERENCES Game(Id) on update cascade on delete cascade,PlayerId integer not null REFERENCES Player(Id)on update cascade on delete cascade)"); 		qs.push("CREATE TABLE IF NOT EXISTS Skills (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Construction integer not null,Negotiation integer not null,Recruitment integer not null,Marketing integer not null,ConstructionExp integer not null,NegotiationExp integer not null,RecruitmentExp integer not null,MarketingExp integer not null)"); 		qs.push("CREATE TABLE IF NOT EXISTS BaseBoardMember (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name varchar not null,ImageId integer not null REFERENCES BoardMemberImage(Id) on update cascade on delete cascade,BaseSkillsId integer not null REFERENCES Skills(Id) on update cascade on delete cascade )"); 		qs.push("CREATE TABLE IF NOT EXISTS BaseProject (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name Varchar not null  ,Cost Float not null,TilesCount integer not null,Level integer not null,MaxBuildTime integer not null,MinBuildTime integer not null,ImageId integer not null  REFERENCES ProjectImage(Id) on update cascade on delete cascade, NeededEmployeesCount Integer )"); 		qs.push("CREATE TABLE IF NOT EXISTS City (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name VARCHAR NOT NULL ,TileCountX INTEGER NOT NULL DEFAULT(20),TileCountY INTEGER NOT NULL DEFAULT(20),BaseTilePrice FLOAT NOT NULL ,Popualtion INTEGER NOT NULL , IsBaseCity Boolean not null , BaseCityId Integer , ImageId integer not null  REFERENCES LargeImages(Id))");		qs.push("CREATE TABLE IF NOT EXISTS Company (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name varchar not null,StockPrice integer not null,Rating integer not null,Cash float not null,PlayerId integer not null REFERENCES Player(Id) on update cascade on delete cascade,MainCityId integer not null REFERENCES City(Id) on update cascade on delete cascade,logoId integer not null REFERENCES LogoImage(Id) on update cascade on delete cascade)"); 		qs.push("CREATE TABLE IF NOT EXISTS GameCities(Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,GameId integer not null REFERENCES Game(Id) on update cascade on delete cascade,CityId integer not null REFERENCES City(Id) on update cascade on delete cascade)"); 		qs.push("CREATE TABLE IF NOT EXISTS ActivityType(Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,Operation varchar not null)"); 		qs.push("CREATE TABLE IF NOT EXISTS Activity (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,TypeId integer not null REFERENCES ActivityType(Id) on update cascade on delete cascade,CompanyId integer not null  REFERENCES Company(Id) on update cascade on delete cascade,TargetId integer not null,WorkingBoardMemberId integer not null  REFERENCES WorkingBoardMember(Id) on update cascade on delete cascade,StartMonth integer not null,EndMonth integer not null)"); 		qs.push("CREATE TABLE IF NOT EXISTS WorkingBoardMember (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,BaseBoardMemberId integer not null REFERENCES BaseBoardMember(Id) on update cascade on delete cascade,HiringMonth integer not null,Satisfaction integer not null,Salary Float not null,SkillsId integer not null REFERENCES Skills(Id) on update cascade on delete cascade,CompanyID integer not null REFERENCES Company(Id) on update cascade on delete cascade )"); 		qs.push("CREATE TABLE IF NOT EXISTS UnderConstructionProject (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name varchar not null,CompanyId integer not null  REFERENCES Company(Id) on update cascade on delete cascade,CurrentEmployeesCount integer not null,BaseProjectId integer not null  REFERENCES BaseProject(Id) on update cascade on delete cascade,ImageId integer not null  REFERENCES UnderConstructionProjectImage(Id) on update cascade on delete cascade)"); 		qs.push("CREATE TABLE IF NOT EXISTS CompletedProject (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,Name varchar not null,CompanyId integer not null  REFERENCES Company(Id) on update cascade on delete cascade,Revenue float not null,Quality integer not null,RunningCosts float not null,Advertising integer not null,Price float not null,BaseProjectId integer not null  REFERENCES BaseProject(Id) on update cascade on delete cascade)"); 		qs.push("CREATE TABLE IF NOT EXISTS Tile (Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE ,PositionX integer not null,PositionY integer not null,ImageId integer references TileImage(Id) on update cascade on delete cascade,CityId integer references City(Id) on update cascade on delete cascade,CompanyId integer  REFERENCES Company(Id) on update cascade on delete cascade,CompletedProjectId  integer  REFERENCES CompletedProject(Id) on update cascade on delete cascade,UnderConstructionProjectId integer  REFERENCES UnderConstructionProject(Id) on update cascade on delete cascade,PriceLevel integer not null,IsDrawable Boolean not null,IsBuildable Boolean not null)"); 		qs.push("CREATE TABLE IF NOT EXISTS CitiesCompanies(Id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE,CityId integer references City(Id) on update cascade on delete cascade,CompanyId integer references Company(Id) on update cascade on delete cascade)"); 		qs.push("insert into Game (CurrentMonth) values (0)");		qs.push("insert into LargeImages (ImagePath ) values ('ff')");		qs.push("insert into PlayerImage (LargeImageID ,ImageName  ) values (1,'pp')");		qs.push("insert into BoardMemberImage (LargeImageID ,ImageName  ) values (1,'pp')");		qs.push("insert into LogoImage (LargeImageID ,ImageName  ) values (1,'pp')");		qs.push("insert into ProjectImage (LargeImageID ,ImageName  ) values (1,'pp')");		qs.push("insert into TileImage (LargeImageID ,ImageName  ) values (1,'pp')");		qs.push("insert into UnderConstructionProjectImage (LargeImageID ,ImageName  ) values (1,'pp')");		qs.push("insert into Player (Name,Age ,ImageId ,IsComputer) values ('omnia',23,1,0)");		qs.push("insert into Player (Name,Age ,ImageId ,IsComputer) values ('ossama',25,1,0)");		qs.push("insert into GamePlayers (GameId,PlayerId) values (1,1)");		qs.push("insert into GamePlayers (GameId,PlayerId) values (1,2)");		qs.push("insert into Skills (Construction ,Negotiation,Recruitment ,Marketing,ConstructionExp ,NegotiationExp,RecruitmentExp,MarketingExp) values (4,4,4,4,0,0,0,0)");		qs.push("insert into Skills (Construction ,Negotiation,Recruitment ,Marketing,ConstructionExp ,NegotiationExp,RecruitmentExp,MarketingExp) values (2,3,2,3,0,0,0,0)");		qs.push("insert into Skills (Construction ,Negotiation,Recruitment ,Marketing,ConstructionExp ,NegotiationExp,RecruitmentExp,MarketingExp) values (1,2,3,3,0,0,0,0)");		qs.push("insert into Skills (Construction ,Negotiation,Recruitment ,Marketing,ConstructionExp ,NegotiationExp,RecruitmentExp,MarketingExp) values (8,8,8,8,0,0,0,0)");		qs.push("insert into BaseBoardMember (Name ,ImageId ,BaseSkillsId) values ('Fatakat',1,1)");			qs.push("insert into BaseBoardMember (Name ,ImageId ,BaseSkillsId) values ('Om-Sa7loul',1,2)");		qs.push("insert into BaseBoardMember (Name ,ImageId ,BaseSkillsId) values ('Zombo2a',1,3)");		qs.push("insert into BaseBoardMember (Name ,ImageId ,BaseSkillsId) values ('El-Shafla7awy',1,4)");		qs.push("insert into City (Name ,BaseTilePrice,Popualtion,IsBaseCity,ImageId) values ('Alex',10,20000000,'true',1)");		qs.push("insert into City (Name ,BaseTilePrice,Popualtion,IsBaseCity,ImageId) values ('Cairo',20,40000000,'true',1)");		qs.push("insert into City (Name ,BaseTilePrice,Popualtion,IsBaseCity,ImageId) values ('Marina',30,1000000,'true',1)");		qs.push("insert into City (Name ,BaseTilePrice,Popualtion,IsBaseCity,ImageId) values ('ITIAlex',100,114,'true',1)");		qs.push("insert into City (Name ,BaseTilePrice,Popualtion,IsBaseCity,ImageId) values ('ShawermaRepublic',80,100000,'true',1)");		qs.push("insert into 	Company (Name ,StockPrice,Cash ,PlayerId,MainCityId ,logoId,Rating ) values ('OSS',1000,10000,2,1,1,10)");			qs.push("insert into 	Company (Name ,StockPrice,Cash ,PlayerId,MainCityId ,logoId,Rating ) values ('AI1',2000,1000,1,1,1,9)");		qs.push("insert into	WorkingBoardMember (BaseBoardMemberId,HiringMonth,Satisfaction,Salary,SkillsId ,CompanyID ) values (1,0,40,45,3,1)");		qs.push("insert into    WorkingBoardMember (BaseBoardMemberId,HiringMonth,Satisfaction,Salary,SkillsId ,CompanyID ) values (4,0,30,60,4,1)");		qs.push("insert into BaseProject (Name,Cost,Level ,MaxBuildTime ,MinBuildTime ,ImageId,TilesCount,NeededEmployeesCount ) values ('HQ',1500,1,5,2,1,1,5)");		qs.push("insert into BaseProject (Name,Cost,Level ,MaxBuildTime ,MinBuildTime ,ImageId,TilesCount,NeededEmployeesCount ) values ('Parking',250,1,5,2,1,1,2)");		qs.push("insert into    CompletedProject (Name,CompanyId ,Revenue,Quality,RunningCosts,Advertising ,Price,BaseProjectId) values ('ComHQ',1,10,1,5,1,50,1)"); 		qs.push("insert into    UnderConstructionProject (Name,CompanyId,CurrentEmployeesCount,BaseProjectId,ImageId) values ('UCHQ',1,10,1,1)");		qs.push("insert into ActivityType(Operation) values('Construction')");		qs.push("insert into ActivityType(Operation) values('LandNegotiation')");		qs.push("insert into ActivityType(Operation) values('ProjectNegotiation')");		qs.push("insert into ActivityType(Operation) values('Recruitment' )");		qs.push("insert into ActivityType(Operation) values('Marketing')");		qs.push("insert into    Activity (TypeId ,CompanyId ,TargetId ,WorkingBoardMemberId ,StartMonth ,EndMonth) values (1,1,1,1,0,5)");		qs.push("insert into    Activity (TypeId ,CompanyId ,TargetId ,WorkingBoardMemberId ,StartMonth ,EndMonth) values (3,1,1,2,0,2)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,CompletedProjectId,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,1,1,1,100,1,1)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,1,1,1,1,1)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,1,1,2,1,1)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,1,1,3,1,1)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,2,1,1,1,1)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,2,1,2,1,1)");		qs.push("insert into Tile (PositionX ,PositionY ,ImageId ,CityId ,CompanyId ,PriceLevel,IsDrawable,IsBuildable) values (3,1,1,2,1,3,1,1)");		qs.push("insert into   CitiesCompanies (CityId ,CompanyId) values (1,1)");		qs.push("insert into   CitiesCompanies (CityId ,CompanyId) values (1,2)");		qs.push("insert into   GameCities (CityId ,GameId) values (1,1)");		new DAL().executeTransaction(qs,function(){callback();},function(err){console.log("trans failed");});	},	successCreate:function(result)	{				alert("Database Ready");	}});